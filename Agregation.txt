Aggregation is a type of association that represents a "has-a" relationship with a 
whole-part hierarchy. 
In aggregation, the child object can exist independently of the parent object, 
implying a weak relationship between the parent and child. 
Aggregation allows one class to contain another class without owning its lifecycle.

What is Aggregation:
--------------------
Aggregation is a special type of association that represents a whole-part 
relationship where the child (part) can exist independently of the parent (whole). 
It is used to model relationships where the contained objects are not strongly 
dependent on the lifecycle of the container object.

Benefits of Aggregation:
---------------------------
Reusability: Aggregated objects can be reused across different parts of the application.
Flexibility: Aggregated objects can exist independently of the parent object, providing flexibility in design.
Modularity: Aggregation promotes modularity by separating the responsibilities of different classes.
Maintainability: Changes to the aggregated object do not necessarily affect the parent object, enhancing maintainability.

Aggregation vs Composition:
-------------------------------
Feature	                                   Aggregation	Composition

Relationship:	*Whole-part (has-a)	                        ->Whole-part (has-a)
Dependency:	*Child can exist independently of the parent	->Child cannot exist independently of the parent
Lifecycle:	*Parent and child have independent lifecycles	->Parent and child have dependent lifecycles
Coupling:	*Loosely coupled	                            ->Tightly coupled


==========================Examples=====================================


Example 1: School and Student
A School class can aggregate multiple Student objects. 
The Student objects can exist independently of the School.

Student Class
public class Student {
    private String name;
    private int rollNumber;

    public Student(String name, int rollNumber) {
        this.name = name;
        this.rollNumber = rollNumber;
    }

    public String getName() {
        return name;
    }

    public int getRollNumber() {
        return rollNumber;
    }
}

import java.util.ArrayList;
import java.util.List;

public class School {
    private String name;
    private List<Student> students;

    public School(String name) {
        this.name = name;
        this.students = new ArrayList<>();
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public void showStudents() {
        for (Student student : students) {
            System.out.println("Student Roll Number: " + student.getRollNumber() + ", Name: " + student.getName());
        }
    }

    public String getName() {
        return name;
    }
}



Example 2: Library and Book
A Library class can aggregate multiple Book objects. 
The Book objects can exist independently of the Library.


public class Book {
    private String title;
    private String author;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }
}

import java.util.ArrayList;
import java.util.List;

public class Library {
    private String name;
    private List<Book> books;

    public Library(String name) {
        this.name = name;
        this.books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public void showBooks() {
        for (Book book : books) {
            System.out.println("Title: " + book.getTitle() + ", Author: " + book.getAuthor());
        }
    }

    public String getName() {
        return name;
    }
}